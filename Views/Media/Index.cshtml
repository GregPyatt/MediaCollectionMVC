@model ScannedMediumViewModel
@{
    int maxPageButtons = 24;
    int halfPageButtons = maxPageButtons / 2; // Division of integers is rounded down.
    int pages = Model.Pagination.TotalPages;
    int maxPrintPages = (pages > maxPageButtons) ? maxPageButtons : pages;
    string sortField = Model.MediaSort.LastSort;
    string lastSearch = Model.MediaSort.LastSearch;
    ViewData["Title"] = "Index";
}

<div class="container">
    <div class="row">
        <div class="col-md-12 px-1">
            <a asp-action="Create">Create New Record</a>
        </div>
    </div>
</div>
<br />

<form asp-controller="Media" id="formSearch" asp-action="Index" method="get">
    <div class="container">
        <div class="row">
            <div class="col-md-4 mr-1 px-1">
                <!-- is the value needed? value="ViewData["CurrentFilter"]" -->
                <input name="searchTerm" id="txtSearchTerm" class="form-control" placeholder="Search by title" value="@lastSearch.ToString()" />
            </div>
            <div class="col-md-2 ml-1 px-1">
                <button type="submit" id="subSearch" class="btn btn-info my-buttons">Search</button>
                <button type="submit" id="subReset" class="btn btn-info my-buttons" onclick="document.getElementById('txtSearchTerm').value=''; document.getElementById('formSearch').submit();">Reset</button>
            </div>
            <div class="col-md-6">
                <label id="lblSearchTerm" @(string.IsNullOrWhiteSpace(lastSearch) ? "hidden" : "") >Searching title for: "@lastSearch.ToString()"</label>
                <input type="hidden" id="hidSortField" value="@sortField.ToString()" />
                <input type="hidden" id="hidPageIndex" value="@Model.Pagination.CurrentPage" />
            </div>
        </div>
    </div>
</form>
<br />
<!-- Added for pagination -->
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 px-1">
            <nav>
                <ul class="pagination" >
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { pageIndex = 1, sortField=sortField, searchTerm=lastSearch })">First</a>
                    </li>
                    <li class="page-item @(Model.Pagination.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { pageIndex = Model.Pagination.CurrentPage - 1, sortField=sortField, searchTerm=lastSearch })">Previous</a>
                    </li>

                    @{
                        switch (Model.Pagination.CurrentPage)
                        {
                            case int j when j < halfPageButtons:
                                for (int i = 1; i <= maxPrintPages; i++)
                                {
                                    <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { pageIndex = i, sortField=sortField, searchTerm=lastSearch })">@(i < 10 ? Html.Raw("&nbsp;") : "")@i</a>
                                    </li>
                                }
                                break;

                            case int j when j >= halfPageButtons && j + maxPageButtons <= pages:
                                    for (int i = Model.Pagination.CurrentPage - halfPageButtons + 1; i < Model.Pagination.CurrentPage + halfPageButtons + 1; i++)
                                    {
                                        <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { pageIndex = i, sortField=sortField, searchTerm=lastSearch })">@(i < 10 ? Html.Raw("&nbsp;") : "")@i</a>
                                        </li>
                                    }
                                break;

                            case int j when j > pages - maxPageButtons:
                                for (int i = pages - maxPageButtons; i <= pages; i++)
                                    {
                                        <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { pageIndex = i, sortField=sortField, searchTerm=lastSearch })">@(i < 10 ? Html.Raw("&nbsp;") : "")@i</a>
                                        </li>
                                    }
                                break;
                            default: 
                                break;
                        }

                    }
                    <li class="page-item @(Model.Pagination.CurrentPage == pages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { pageIndex = Model.Pagination.CurrentPage + 1, sortField=sortField, searchTerm=lastSearch })">Next</a>
                    </li>
                    <li class="page-item  @(Model.Pagination.CurrentPage == pages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { pageIndex = pages, sortField=sortField, searchTerm=lastSearch })">Last</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <a href="/Media/Index?sortField=@Model.MediaSort.TitleSortOrder&searchTerm=@lastSearch">@Html.DisplayNameFor(model => model.ScannedMediaObjects[0].Title)</a>
                    </th>
                    <th>
                        <a href="/Media/Index?sortField=@Model.MediaSort.AuthorSortOrder&searchTerm=@lastSearch">@Html.DisplayNameFor(model => model.ScannedMediaObjects[0].Authors)</a>
                    </th>
                    <th>
                        <a href="/Media/Index?sortField=@Model.MediaSort.CategorySortOrder&searchTerm=@lastSearch">@Html.DisplayNameFor(model => model.ScannedMediaObjects[0].Categories)</a>
                    </th>
                    <th>
                        <a href="/Media/Index?sortField=@Model.MediaSort.PublishedDateSortOrder&searchTerm=@lastSearch">@Html.DisplayNameFor(model => model.ScannedMediaObjects[0].PublishedDate)</a>
                    </th>
                    <th>
                        <a href="/Media/Index?sortField=@Model.MediaSort.PublisherSortOrder&searchTerm=@lastSearch">@Html.DisplayNameFor(model => model.ScannedMediaObjects[0].Publisher)</a>
                    </th>
                    <th>
                        <a href="/Media/Index?sortField=@Model.MediaSort.PagesSortOrder&searchTerm=@lastSearch">@Html.DisplayNameFor(model => model.ScannedMediaObjects[0].Pages)</a>
                    </th>
                    <th>
                        <!--<a href="/Media/Index?sortField=@Model.MediaSort.ISBNSortOrder&searchTerm=@lastSearch">-->@Html.DisplayNameFor(model => model.ScannedMediaObjects[0].Isbn)<!--</a>-->
                    </th>
                    <th>
                        <a href="/Media/Index?sortField=@Model.MediaSort.IsReadSortOrder&searchTerm=@lastSearch">@Html.DisplayNameFor(model => model.ScannedMediaObjects[0].IsRead)</a>
                    </th>
                    <th></th>
                  </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.ScannedMediaObjects) {
                <tr>
                    <td>
                        <b>@Html.DisplayFor(modelItem => item.Title)</b>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Authors)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Categories)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PublishedDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Publisher)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Pages)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Isbn)
                    </td>
                    <td>
                        @* @Html.DisplayFor(modelItem => item.IsRead) *@
                        <input asp-for="@item.IsRead" disabled type="checkbox" class="form-check-label" />
                    </td>
                    <td style="width: 15%">
                            <a href="/Media/Edit?id=@item.MediaId">Edit</a> |
                            <a href="/Media/Details?id=@item.MediaId">Details</a> |
                            <a href="/Media/Delete?id=@item.MediaId">Delete</a>
                    </td>
                </tr>

        }
            </tbody>
        </table>
    </div>
</div>